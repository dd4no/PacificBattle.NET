@page "/battlebox"
@inject AppDbContext db

<div id="battlebox" class="d-flex justify-content-between m-auto p-2">

    @* Attack Ship *@
    <ShipTile Ship="Attacker"></ShipTile>

    @* Combat Results *@
    <div class="flex-column text center">
        <h5 class="strong">Combat Results</h5>
        <br />
        @if (Defender.Damage.CombatLog is not null)
        {
            @foreach (var message in Defender.Damage.CombatLog)
            {
                <p>@message</p>
            }
        }
    </div>

    @* Defender Ship *@
    <ShipTile Ship="Defender"></ShipTile>
    <p>@Message</p>
    <p>Total Damage: @Defender.Damage.TotalDamage</p>

</div>

<div id="buttonbox" class="text-center mb-1 ">

    @if (!isResolved)
    {
        <div>
            <button class="btn btn-danger m-1 p-3" @onclick="StartCombat"><b>FIRE!</b></button>
        </div>
    }

    <div>
        <button class="btn btn-success m-4 p-4" @onclick="GetShips"><b>Get Ships</b></button>
    </div>

</div>

<style>
    #battlebox {
    background-color: cyan;
    }
    #buttonbox {
    background-color: gray;
    }
</style>

@code 
{
    private static readonly Random random = new Random();

    private List<Ship> Allies { get; set; } = new();
    private List<Ship> Japan { get; set; } = new();

    public CombatShip Attacker { get; set; } = new();
    public CombatShip Defender { get; set; } = new();
    public string Message { get; set; } = string.Empty;

    private bool isResolved = false;

    protected override void OnInitialized()
    {
        Allies = db.Ships.Where(x => x.NavyId == 1 || x.NavyId == 3 || x.NavyId == 4).ToList();
        Japan = db.Ships.Where(x => x.NavyId == 2).ToList();
        GetShips();
    } 

    private void GetShips()
    {
        Reset();

        var japan = Japan[random.Next(Japan.Count)];
        Attacker = Shipyard.BuildShip(japan);

        var allies = Allies[random.Next(Allies.Count)];
        Defender = Shipyard.BuildShip(allies);

    }

    private void StartCombat()
    {
        Reset();
        AttackCoordinator.Target = Defender;
       
        AttackCoordinator.ResolveAttack(Attacker.Attack);

        if (Defender.Damage.IsDisabled)
        {
            Message = "Ship has been disabled!";
            isResolved = true;
        };
        if (Defender.IsSunk)
        {
            Message = "Ship has been sunk!";
            isResolved = true;
        };
    }

    private void Reset()
    {
        Message = string.Empty;
        isResolved = false;
    }
}