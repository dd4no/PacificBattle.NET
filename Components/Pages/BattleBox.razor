@page "/battlebox"
@inject AppDbContext db
@inject AttackResolver AttackResolver

<div id="battlebox" class="d-flex justify-content-between m-auto p-2">

    @* Attack Ship *@
    <ShipTile Ship="Attacker"></ShipTile>

    @* Combat Results *@
    <div class="flex-column text center">
        <h5 class="strong">Combat Results</h5>
        <br />
        @if (Defender.Damage.CombatResults is not null)
        {
            @foreach (var message in Defender.Damage.CombatResults)
            {
                <p>@message</p>
            }
        }
    </div>

    @* Defender Ship *@
    <ShipTile Ship="Defender"></ShipTile>
</div>
<div id="buttonbox" class="text-center mb-1 ">

    @if (!isResolved)
    {
        <div>
            <button class="btn btn-danger m-1 p-3" @onclick="StartCombat"><b>FIRE!</b></button>
        </div>
    }

    <div>
        <button class="btn btn-success m-4 p-4" @onclick="GetShips"><b>Get Ships</b></button>
    </div>

</div>

<style>
    #battlebox {
        background-color: cyan;
    }
    #buttonbox {
        background-color: gray;
    }
</style>

@code 
{
    private static readonly Random random = new Random();

    private List<Ship> Allies { get; set; } = new();
    private List<Ship> Japan { get; set; } = new();

    public CombatShip Attacker { get; set; } = new();
    public CombatShip Defender { get; set; } = new();
    public string Message { get; set; } = string.Empty;

    private bool isResolved = false;

    protected override void OnInitialized()
    {
        Allies = db.Ships.Where(x => x.NavyId == 1 || x.NavyId == 3 || x.NavyId == 4).ToList();
        Japan = db.Ships.Where(x => x.NavyId == 2).ToList();
        GetShips();
    } 
    
    private void GetShips()
    {
        isResolved = false;
        Message = string.Empty;
        var randomAttackShipIndex = random.Next(Japan.Count+1);
        var randomDefenderShipIndex = random.Next(Allies.Count+1);

        Attacker = new CombatShip 
        {
            ShipName = Japan[randomAttackShipIndex].ShipName!,
            NavyId = Japan[randomAttackShipIndex].NavyId,
            Attack = Japan[randomAttackShipIndex].Attack,
            Armor = Japan[randomAttackShipIndex].Armor,
            Speed = Japan[randomAttackShipIndex].Speed,
            Airstrike = Japan[randomAttackShipIndex].Airstrike,
            HasAttackBonus = Japan[randomAttackShipIndex].HasAttackBonus,
            EndTurn = Japan[randomAttackShipIndex].EndTurn,
            Damage = new(),
        };

        Defender = new CombatShip
        {
            ShipName = Allies[randomDefenderShipIndex].ShipName!,
            NavyId = Allies[randomDefenderShipIndex].NavyId,
            Attack = Allies[randomDefenderShipIndex].Attack,
            Armor = Allies[randomDefenderShipIndex].Armor,
            Speed = Allies[randomDefenderShipIndex].Speed,
            Airstrike = Allies[randomDefenderShipIndex].Airstrike,
            HasAttackBonus = Allies[randomDefenderShipIndex].HasAttackBonus,
            EndTurn = Allies[randomDefenderShipIndex].EndTurn,
            Damage = new(),
        };
    }

    private void StartCombat()
    {
        AttackResolver.Target = Defender;
        Message = string.Empty;
        AttackResolver.ResolveAttack(Attacker.Attack);
        if (Defender.Damage.IsDisabled)
        {
            Message = "Ship has been disabled!";
            isResolved = true;
        };
        if (Defender.IsDestroyed)
        {
            Message = "Ship has been destroyed!";
            isResolved = true;
        };
    }
}