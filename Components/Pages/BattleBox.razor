@page "/"
@using PacificBattle.Interfaces
@using PacificBattle.Components.GamePieces
@inject IFleetManager fm

<div>

    <div id="battlebox" class="d-flex justify-content-between m-auto p-2">

        @* Attack Ship *@
        <div class="flex-column text-center">
            <ShipTile Ship="Attacker"></ShipTile>
            <p>Total Damage: @Attacker.Damage.TotalDamage</p>
        </div>

        @* Combat Results *@
        <div class="flex-column">
            <h5 class=""><b>Combat Results</b></h5>
            <h6 class="">@Message</h6>
            <div class="text-center">
                @foreach (var log in Target.Damage.DamageLogs)
                {
                    <p>@log</p>
                }
                <p>@Status</p>
            </div>
        </div>

        @* Defender Ship *@
        <div class="flex-column text-center">
            <ShipTile Ship="Target"></ShipTile>
            <p>Total Damage: @Target.Damage.TotalDamage</p>
        </div>

    </div>

    <div id="buttonbox" class="d-flex justify-content-between p-2">

        <div class="p-1">
            <button class="btn btn-danger m-1 p-3" @onclick="StartCombat" hidden="@(isResolved)"><b>Attack</b></button>
        </div>

        <div class="p-1">
            <button class="btn btn-success m-4 p-4" @onclick="GetShips" hidden="@(!isResolved)"><b>Get Ships</b></button>
        </div>

    </div>

</div>

<style>
    #battlebox {
    background-color: cyan;
    }
    #buttonbox {
    background-color: gray;
    }
</style>

@code 
{
    private bool isResolved;
    private bool isFirstRound;

    public CombatShip Attacker { get; set; } = new();
    public CombatShip Target { get; set; } = new();
    public string Status { get; set; } = string.Empty;
    public string Message { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        GetShips();
    } 

    private void Reset()
    {
        Status = string.Empty;
        Message = string.Empty;
        isFirstRound = true;
        isResolved = false;
    }

    private void GetShips()
    {
        Reset();
        Attacker = fm.BuildRandomShipByNavy(2);
        Target = fm.BuildRandomShipByNavy(1);
    }

    private void StartCombat()
    {
        Message = $"{Attacker.ShipName} attacks {Target.ShipName}";
        Log.Information("");
        Log.Information("********** Attack! **********");
        Log.Information("{attacker} vs {target}", Attacker.ShipName, Target.ShipName);
        Attack(Attacker, Target);
        if (isFirstRound) { Swap(); }
        isFirstRound = false;
    }

    private void Attack(CombatShip attacker, CombatShip target)
    {
        AttackCoordinator.Target = target;
        AttackCoordinator.ResolveAttack(attacker.Guns);
        DetermineStatus(target);
    }

    private void DetermineStatus(CombatShip target)
    {
        if (target.Damage.IsDisabled)
        {
            Status = $"{target.ShipName} has been disabled!";
            Log.Information("{ship} disabled", target.ShipName);
            Log.Information("");

        };
        if (target.IsSunk)
        {
            Status = $"{target.ShipName} has been sunk!";
            Log.Information("{ship} sunk", target.ShipName);
            Log.Information("");
        };
        isResolved = isFirstRound ? false : true;
            Log.Information("********** **********");
    }

    private void Swap(){
        Target.Damage.DamageLogs.Clear();
        CombatShip temp = Attacker;
        Attacker = Target;
        Target = temp;
    }
}